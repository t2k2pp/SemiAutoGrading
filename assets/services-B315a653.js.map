{"version":3,"file":"services-B315a653.js","sources":["../../src/services/dataService.ts","../../src/services/llmService.ts"],"sourcesContent":["import type { Exam, Question, Answer, GradingResult, LLMConfig } from '../contexts/SimpleAppContext';\r\n\r\n// IndexedDB設定\r\nconst DB_NAME = 'IPAGraderDB';\r\nconst DB_VERSION = 1;\r\n\r\n// オブジェクトストア名\r\nconst STORES = {\r\n  EXAMS: 'exams',\r\n  QUESTIONS: 'questions',\r\n  ANSWERS: 'answers',\r\n  GRADING_RESULTS: 'gradingResults',\r\n};\r\n\r\n// LocalStorage キー\r\nconst STORAGE_KEYS = {\r\n  LLM_CONFIG: 'ipa-grader-llm-config',\r\n  UI_SETTINGS: 'ipa-grader-ui-settings',\r\n};\r\n\r\nclass DataService {\r\n  private db: IDBDatabase | null = null;\r\n\r\n  // IndexedDB初期化\r\n  async initDB(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n      request.onerror = () => {\r\n        reject(new Error('IndexedDB初期化に失敗しました'));\r\n      };\r\n\r\n      request.onsuccess = () => {\r\n        this.db = request.result;\r\n        resolve();\r\n      };\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        const db = (event.target as IDBOpenDBRequest).result;\r\n\r\n        // Examsストア\r\n        if (!db.objectStoreNames.contains(STORES.EXAMS)) {\r\n          const examStore = db.createObjectStore(STORES.EXAMS, { keyPath: 'id' });\r\n          examStore.createIndex('name', 'name', { unique: false });\r\n          examStore.createIndex('createdAt', 'createdAt', { unique: false });\r\n        }\r\n\r\n        // Questionsストア\r\n        if (!db.objectStoreNames.contains(STORES.QUESTIONS)) {\r\n          const questionStore = db.createObjectStore(STORES.QUESTIONS, { keyPath: 'id' });\r\n          questionStore.createIndex('examId', 'examId', { unique: false });\r\n          questionStore.createIndex('number', 'number', { unique: false });\r\n        }\r\n\r\n        // Answersストア\r\n        if (!db.objectStoreNames.contains(STORES.ANSWERS)) {\r\n          const answerStore = db.createObjectStore(STORES.ANSWERS, { keyPath: 'id' });\r\n          answerStore.createIndex('examId', 'examId', { unique: false });\r\n          answerStore.createIndex('studentId', 'studentId', { unique: false });\r\n          answerStore.createIndex('questionId', 'questionId', { unique: false });\r\n        }\r\n\r\n        // GradingResultsストア\r\n        if (!db.objectStoreNames.contains(STORES.GRADING_RESULTS)) {\r\n          const resultStore = db.createObjectStore(STORES.GRADING_RESULTS, { keyPath: 'id' });\r\n          resultStore.createIndex('answerId', 'answerId', { unique: true });\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  // 汎用的なIndexedDB操作メソッド\r\n  private async performDBOperation<T>(\r\n    storeName: string,\r\n    operation: (store: IDBObjectStore) => IDBRequest<T>\r\n  ): Promise<T> {\r\n    if (!this.db) {\r\n      throw new Error('データベースが初期化されていません');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction([storeName], 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = operation(store);\r\n\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(new Error(`データベース操作に失敗しました: ${request.error}`));\r\n    });\r\n  }\r\n\r\n  private async performDBReadOperation<T>(\r\n    storeName: string,\r\n    operation: (store: IDBObjectStore) => IDBRequest<T>\r\n  ): Promise<T> {\r\n    if (!this.db) {\r\n      throw new Error('データベースが初期化されていません');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction([storeName], 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = operation(store);\r\n\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(new Error(`データベース読み取りに失敗しました: ${request.error}`));\r\n    });\r\n  }\r\n\r\n  // Exam関連操作\r\n  async saveExam(exam: Exam): Promise<void> {\r\n    await this.performDBOperation(STORES.EXAMS, store => store.put(exam));\r\n\r\n    // 関連する質問も保存\r\n    for (const question of exam.questions) {\r\n      await this.saveQuestion(question);\r\n    }\r\n  }\r\n\r\n  async getExam(id: string): Promise<Exam | null> {\r\n    const exam = await this.performDBReadOperation(STORES.EXAMS, store => store.get(id));\r\n    if (!exam) return null;\r\n\r\n    // 質問を取得\r\n    const questions = await this.getQuestionsByExamId(id);\r\n    return { ...exam, questions };\r\n  }\r\n\r\n  async getAllExams(): Promise<Exam[]> {\r\n    const exams = await this.performDBReadOperation(STORES.EXAMS, store => store.getAll());\r\n\r\n    // 各試験の質問を取得\r\n    const examsWithQuestions: Exam[] = [];\r\n    for (const exam of exams) {\r\n      const questions = await this.getQuestionsByExamId(exam.id);\r\n      examsWithQuestions.push({ ...exam, questions });\r\n    }\r\n\r\n    return examsWithQuestions;\r\n  }\r\n\r\n  async deleteExam(id: string): Promise<void> {\r\n    await this.performDBOperation(STORES.EXAMS, store => store.delete(id));\r\n\r\n    // 関連データも削除\r\n    const questions = await this.getQuestionsByExamId(id);\r\n    for (const question of questions) {\r\n      await this.deleteQuestion(question.id);\r\n    }\r\n\r\n    const answers = await this.getAnswersByExamId(id);\r\n    for (const answer of answers) {\r\n      await this.deleteAnswer(answer.id);\r\n    }\r\n  }\r\n\r\n  // Question関連操作\r\n  async saveQuestion(question: Question): Promise<void> {\r\n    await this.performDBOperation(STORES.QUESTIONS, store => store.put(question));\r\n  }\r\n\r\n  async getQuestion(id: string): Promise<Question | null> {\r\n    return await this.performDBReadOperation(STORES.QUESTIONS, store => store.get(id));\r\n  }\r\n\r\n  async getQuestionsByExamId(examId: string): Promise<Question[]> {\r\n    return await this.performDBReadOperation(STORES.QUESTIONS, store => {\r\n      const index = store.index('examId');\r\n      return index.getAll(examId);\r\n    });\r\n  }\r\n\r\n  async deleteQuestion(id: string): Promise<void> {\r\n    await this.performDBOperation(STORES.QUESTIONS, store => store.delete(id));\r\n  }\r\n\r\n  // Answer関連操作\r\n  async saveAnswer(answer: Answer): Promise<void> {\r\n    await this.performDBOperation(STORES.ANSWERS, store => store.put(answer));\r\n  }\r\n\r\n  async getAnswer(id: string): Promise<Answer | null> {\r\n    return await this.performDBReadOperation(STORES.ANSWERS, store => store.get(id));\r\n  }\r\n\r\n  async getAnswersByExamId(examId: string): Promise<Answer[]> {\r\n    return await this.performDBReadOperation(STORES.ANSWERS, store => {\r\n      const index = store.index('examId');\r\n      return index.getAll(examId);\r\n    });\r\n  }\r\n\r\n  async getAnswersByStudentId(studentId: string): Promise<Answer[]> {\r\n    return await this.performDBReadOperation(STORES.ANSWERS, store => {\r\n      const index = store.index('studentId');\r\n      return index.getAll(studentId);\r\n    });\r\n  }\r\n\r\n  async deleteAnswer(id: string): Promise<void> {\r\n    await this.performDBOperation(STORES.ANSWERS, store => store.delete(id));\r\n\r\n    // 関連する採点結果も削除\r\n    const gradingResult = await this.getGradingResultByAnswerId(id);\r\n    if (gradingResult) {\r\n      await this.deleteGradingResult(gradingResult.id);\r\n    }\r\n  }\r\n\r\n  // GradingResult関連操作\r\n  async saveGradingResult(result: GradingResult): Promise<void> {\r\n    await this.performDBOperation(STORES.GRADING_RESULTS, store => store.put(result));\r\n  }\r\n\r\n  async getGradingResult(id: string): Promise<GradingResult | null> {\r\n    return await this.performDBReadOperation(STORES.GRADING_RESULTS, store => store.get(id));\r\n  }\r\n\r\n  async getGradingResultByAnswerId(answerId: string): Promise<GradingResult | null> {\r\n    return await this.performDBReadOperation(STORES.GRADING_RESULTS, store => {\r\n      const index = store.index('answerId');\r\n      return index.get(answerId);\r\n    });\r\n  }\r\n\r\n  async getAllGradingResults(): Promise<GradingResult[]> {\r\n    return await this.performDBReadOperation(STORES.GRADING_RESULTS, store => store.getAll());\r\n  }\r\n\r\n  async deleteGradingResult(id: string): Promise<void> {\r\n    await this.performDBOperation(STORES.GRADING_RESULTS, store => store.delete(id));\r\n  }\r\n\r\n  // LocalStorage操作（設定など）\r\n  saveLLMConfig(config: LLMConfig): void {\r\n    localStorage.setItem(STORAGE_KEYS.LLM_CONFIG, JSON.stringify(config));\r\n  }\r\n\r\n  getLLMConfig(): LLMConfig | null {\r\n    const configStr = localStorage.getItem(STORAGE_KEYS.LLM_CONFIG);\r\n    return configStr ? JSON.parse(configStr) : null;\r\n  }\r\n\r\n  saveUISettings(settings: Record<string, any>): void {\r\n    localStorage.setItem(STORAGE_KEYS.UI_SETTINGS, JSON.stringify(settings));\r\n  }\r\n\r\n  getUISettings(): Record<string, any> | null {\r\n    const settingsStr = localStorage.getItem(STORAGE_KEYS.UI_SETTINGS);\r\n    return settingsStr ? JSON.parse(settingsStr) : null;\r\n  }\r\n\r\n  // データクリア\r\n  async clearAllData(): Promise<void> {\r\n    if (!this.db) return;\r\n\r\n    const storeNames = [STORES.EXAMS, STORES.QUESTIONS, STORES.ANSWERS, STORES.GRADING_RESULTS];\r\n\r\n    for (const storeName of storeNames) {\r\n      await this.performDBOperation(storeName, store => store.clear());\r\n    }\r\n  }\r\n\r\n  clearLocalStorage(): void {\r\n    Object.values(STORAGE_KEYS).forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n  }\r\n\r\n  // データベース接続確認\r\n  isConnected(): boolean {\r\n    return this.db !== null;\r\n  }\r\n\r\n  // データベースクローズ\r\n  close(): void {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}\r\n\r\n// シングルトンインスタンス\r\nexport const dataService = new DataService();","import type { LLMConfig, Question, Answer, SubQuestion } from '../contexts/SimpleAppContext';\r\n\r\ninterface LLMGradingResponse {\r\n  score: '○' | '△' | '×';\r\n  points: number;\r\n  reason: string;\r\n  confidence?: number;\r\n}\r\n\r\ninterface GradingPrompt {\r\n  systemPrompt: string;\r\n  questionContext: string;\r\n  answerToGrade: string;\r\n  gradingCriteria: string;\r\n}\r\n\r\nexport class LLMService {\r\n  private config: LLMConfig;\r\n\r\n  constructor(config: LLMConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  // 設定更新\r\n  updateConfig(config: LLMConfig): void {\r\n    this.config = config;\r\n  }\r\n\r\n  // LM Studio接続テスト\r\n  async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${this.config.endpoint}/models`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        signal: AbortSignal.timeout(this.config.timeout),\r\n      });\r\n\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('LM Studio接続テストに失敗:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 利用可能なモデル一覧取得\r\n  async getAvailableModels(): Promise<string[]> {\r\n    try {\r\n      const response = await fetch(`${this.config.endpoint}/models`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        signal: AbortSignal.timeout(this.config.timeout),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.data?.map((model: any) => model.id) || [];\r\n    } catch (error) {\r\n      console.error('モデル一覧取得に失敗:', error);\r\n      throw new Error('モデル一覧の取得に失敗しました');\r\n    }\r\n  }\r\n\r\n  // 採点プロンプト生成\r\n  private generateGradingPrompt(subQuestion: SubQuestion, answer: Answer): GradingPrompt {\r\n    const systemPrompt = `You are a grader for the IPA Project Manager certification exam.\r\nGrade the answer according to the following criteria and return the result in JSON format.\r\n\r\nGrading criteria:\r\n- ○: Equivalent to the sample answer (meets 80% or more elements)\r\n- △: Partially correct (meets 50-79% of elements)\r\n- ×: Incorrect or off-topic (less than 50%)\r\n\r\nReturn the output in the following JSON format:\r\n{\r\n  \"score\": \"○\" | \"△\" | \"×\",\r\n  \"points\": numeric_score,\r\n  \"reason\": \"grading_reason_within_100_chars\"\r\n}`;\r\n\r\n    const questionContext = `QUESTION:\r\n${subQuestion.content}\r\n\r\nQUESTION INTENT:\r\n${subQuestion.intention}\r\n\r\nSAMPLE ANSWER:\r\n${subQuestion.sampleAnswer}\r\n\r\nMAX SCORE: ${subQuestion.maxScore} points`;\r\n\r\n    const answerToGrade = `STUDENT ANSWER TO GRADE:\r\nStudent ID: ${answer.studentId}\r\nAnswer Content: ${answer.content}`;\r\n\r\n    const gradingCriteria = `GRADING CRITERIA:\r\n- Does the answer accurately understand the question requirements?\r\n- Does the answer align with the question intent?\r\n- How much does the answer include elements from the sample answer?\r\n- Are appropriate PM knowledge and expressions used?\r\n- Is the content logical and consistent?`;\r\n\r\n    return {\r\n      systemPrompt,\r\n      questionContext,\r\n      answerToGrade,\r\n      gradingCriteria,\r\n    };\r\n  }\r\n\r\n  // LLMを使った採点実行\r\n  async gradeAnswer(subQuestion: SubQuestion, answer: Answer): Promise<LLMGradingResponse> {\r\n    const prompt = this.generateGradingPrompt(subQuestion, answer);\r\n\r\n    const userPrompt = `${prompt.questionContext}\r\n\r\n${prompt.answerToGrade}\r\n\r\n${prompt.gradingCriteria}\r\n\r\nPlease grade the student answer based on the above information and return the result in JSON format.`;\r\n\r\n    try {\r\n      let url = '';\r\n      let headers: Record<string, string> = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      let requestBody: any = {\r\n        model: this.config.model,\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: prompt.systemPrompt,\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: userPrompt,\r\n          },\r\n        ],\r\n        temperature: this.config.temperature\r\n      };\r\n\r\n      // 最大トークン数制限を使用する場合のみ追加\r\n      if (this.config.useMaxTokens) {\r\n        requestBody.max_tokens = this.config.maxTokens;\r\n      }\r\n\r\n      // プロバイダー別の設定\r\n      switch (this.config.provider) {\r\n        case 'lm-studio':\r\n          url = `${this.config.endpoint}/chat/completions`;\r\n          headers['Authorization'] = 'Bearer dummy-key';\r\n          break;\r\n\r\n        case 'ollama':\r\n          url = `${this.config.ollamaHost || this.config.endpoint}/v1/chat/completions`;\r\n          break;\r\n\r\n        case 'azure-openai':\r\n          if (this.config.apiVersion?.includes('v1')) {\r\n            // New v1 API format\r\n            url = `${this.config.endpoint}/openai/v1/chat/completions`;\r\n          } else {\r\n            // Traditional format\r\n            url = `${this.config.endpoint}/openai/deployments/${this.config.deploymentId}/chat/completions?api-version=${this.config.apiVersion}`;\r\n          }\r\n          if (this.config.apiKey) {\r\n            headers['api-key'] = this.config.apiKey;\r\n          }\r\n          break;\r\n\r\n        case 'gemini':\r\n          // Convert to Gemini format\r\n          url = `${this.config.endpoint}/models/${this.config.model}:generateContent`;\r\n          if (this.config.geminiApiKey) {\r\n            headers['x-goog-api-key'] = this.config.geminiApiKey;\r\n          }\r\n          const generationConfig: any = {\r\n            temperature: this.config.temperature,\r\n          };\r\n\r\n          // 最大トークン数制限を使用する場合のみ追加\r\n          if (this.config.useMaxTokens) {\r\n            generationConfig.maxOutputTokens = this.config.maxTokens;\r\n          }\r\n\r\n          requestBody = {\r\n            contents: [\r\n              {\r\n                parts: [\r\n                  {\r\n                    text: `${prompt.systemPrompt}\\n\\n${userPrompt}`\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            generationConfig\r\n          };\r\n          break;\r\n\r\n        default:\r\n          throw new Error(`Unsupported provider: ${this.config.provider}`);\r\n      }\r\n\r\n      console.log('Making request to:', url);\r\n      console.log('Request body:', JSON.stringify(requestBody, null, 2));\r\n\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(requestBody),\r\n        signal: AbortSignal.timeout(this.config.timeout),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      let content = '';\r\n\r\n      // プロバイダー別のレスポンス解析\r\n      switch (this.config.provider) {\r\n        case 'lm-studio':\r\n        case 'ollama':\r\n        case 'azure-openai':\r\n          content = data.choices?.[0]?.message?.content;\r\n          break;\r\n        case 'gemini':\r\n          content = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n          break;\r\n      }\r\n\r\n      if (!content) {\r\n        throw new Error('LLMからの応答が空です');\r\n      }\r\n\r\n      console.log('LLM Response:', content);\r\n\r\n      // JSON解析\r\n      let gradingResult: LLMGradingResponse;\r\n      try {\r\n        // ```json ``` で囲まれている場合の処理\r\n        const jsonMatch = content.match(/```json\\s*([\\s\\S]*?)\\s*```/);\r\n        if (jsonMatch) {\r\n          gradingResult = JSON.parse(jsonMatch[1]);\r\n        } else {\r\n          gradingResult = JSON.parse(content);\r\n        }\r\n      } catch (parseError) {\r\n        // JSONパースに失敗した場合、正規表現でマニュアル抽出を試みる\r\n        gradingResult = this.extractGradingFromText(content);\r\n      }\r\n\r\n      // 結果の検証\r\n      this.validateGradingResponse(gradingResult, subQuestion.maxScore);\r\n\r\n      return gradingResult;\r\n    } catch (error) {\r\n      console.error('LLM採点に失敗:', error);\r\n\r\n      if (error instanceof Error) {\r\n        if (error.name === 'AbortError') {\r\n          throw new Error('採点がタイムアウトしました');\r\n        }\r\n        throw new Error(`採点処理でエラーが発生しました: ${error.message}`);\r\n      }\r\n\r\n      throw new Error('採点処理で不明なエラーが発生しました');\r\n    }\r\n  }\r\n\r\n  // テキストから採点結果を抽出（JSONパース失敗時のフォールバック）\r\n  private extractGradingFromText(text: string): LLMGradingResponse {\r\n    console.log('Extracting from text:', text);\r\n\r\n    // 複数パターンでスコアを検索\r\n    const scorePatterns = [\r\n      /[\"']?score[\"']?\\s*:\\s*[\"']([○△×])[\"']/,\r\n      /score\\s*:\\s*([○△×])/,\r\n      /([○△×])/,\r\n      /grade\\s*:\\s*([○△×])/\r\n    ];\r\n\r\n    const pointsPatterns = [\r\n      /[\"']?points?[\"']?\\s*:\\s*(\\d+)/,\r\n      /points?\\s*:\\s*(\\d+)/,\r\n      /(\\d+)\\s*points?/,\r\n      /score:\\s*(\\d+)/\r\n    ];\r\n\r\n    const reasonPatterns = [\r\n      /[\"']?reason[\"']?\\s*:\\s*[\"']([^\"']+)[\"']/,\r\n      /reason\\s*:\\s*(.+?)(?:\\n|$)/,\r\n      /because\\s*:\\s*(.+?)(?:\\n|$)/,\r\n      /explanation\\s*:\\s*(.+?)(?:\\n|$)/\r\n    ];\r\n\r\n    let scoreMatch = null;\r\n    for (const pattern of scorePatterns) {\r\n      scoreMatch = text.match(pattern);\r\n      if (scoreMatch) break;\r\n    }\r\n\r\n    let pointsMatch = null;\r\n    for (const pattern of pointsPatterns) {\r\n      pointsMatch = text.match(pattern);\r\n      if (pointsMatch) break;\r\n    }\r\n\r\n    let reasonMatch = null;\r\n    for (const pattern of reasonPatterns) {\r\n      reasonMatch = text.match(pattern);\r\n      if (reasonMatch) break;\r\n    }\r\n\r\n    if (!scoreMatch) {\r\n      console.error('No score found in text:', text);\r\n      throw new Error('採点結果のスコアを抽出できませんでした');\r\n    }\r\n\r\n    return {\r\n      score: scoreMatch[1] as '○' | '△' | '×',\r\n      points: pointsMatch ? parseInt(pointsMatch[1], 10) : 5,\r\n      reason: reasonMatch ? reasonMatch[1].trim() : '採点理由を抽出できませんでした',\r\n    };\r\n  }\r\n\r\n  // 採点結果の妥当性検証\r\n  private validateGradingResponse(response: LLMGradingResponse, maxScore: number): void {\r\n    if (!['○', '△', '×'].includes(response.score)) {\r\n      throw new Error(`無効なスコア: ${response.score}`);\r\n    }\r\n\r\n    if (typeof response.points !== 'number' || response.points < 0 || response.points > maxScore) {\r\n      throw new Error(`無効な点数: ${response.points} (最大: ${maxScore})`);\r\n    }\r\n\r\n    if (!response.reason || typeof response.reason !== 'string' || response.reason.length === 0) {\r\n      throw new Error('採点理由が無効です');\r\n    }\r\n\r\n    // 点数とスコアの整合性チェック\r\n    const pointPercentage = (response.points / maxScore) * 100;\r\n\r\n    if (response.score === '○' && pointPercentage < 80) {\r\n      console.warn(`スコア○だが点数が低い: ${response.points}/${maxScore} (${pointPercentage.toFixed(1)}%)`);\r\n    } else if (response.score === '△' && (pointPercentage < 50 || pointPercentage >= 80)) {\r\n      console.warn(`スコア△だが点数が範囲外: ${response.points}/${maxScore} (${pointPercentage.toFixed(1)}%)`);\r\n    } else if (response.score === '×' && pointPercentage >= 50) {\r\n      console.warn(`スコア×だが点数が高い: ${response.points}/${maxScore} (${pointPercentage.toFixed(1)}%)`);\r\n    }\r\n  }\r\n\r\n  // バッチ採点（複数回答の一括処理）- 将来実装予定\r\n  async gradeBatch(\r\n    _questions: Question[],\r\n    _answers: Answer[],\r\n    _onProgress?: (current: number, total: number) => void\r\n  ): Promise<LLMGradingResponse[]> {\r\n    // TODO: 新しいIPA構造に対応した実装が必要\r\n    throw new Error('バッチ採点機能は現在開発中です');\r\n  }\r\n\r\n  // 採点一貫性チェック（同じ回答を複数回採点して比較）\r\n  async checkConsistency(subQuestion: SubQuestion, answer: Answer, iterations: number = 3): Promise<{\r\n    results: LLMGradingResponse[];\r\n    isConsistent: boolean;\r\n    variance: number;\r\n  }> {\r\n    const results: LLMGradingResponse[] = [];\r\n\r\n    for (let i = 0; i < iterations; i++) {\r\n      const result = await this.gradeAnswer(subQuestion, answer);\r\n      results.push(result);\r\n\r\n      // 呼び出し間隔\r\n      if (i < iterations - 1) {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n    }\r\n\r\n    // 点数のばらつきを計算\r\n    const points = results.map(r => r.points);\r\n    const average = points.reduce((sum, p) => sum + p, 0) / points.length;\r\n    const variance = points.reduce((sum, p) => sum + Math.pow(p - average, 2), 0) / points.length;\r\n\r\n    // 一貫性判定（標準偏差が配点の10%以下なら一貫している）\r\n    const standardDeviation = Math.sqrt(variance);\r\n    const isConsistent = standardDeviation <= (subQuestion.maxScore * 0.1);\r\n\r\n    return {\r\n      results,\r\n      isConsistent,\r\n      variance,\r\n    };\r\n  }\r\n}\r\n\r\nexport const llmService = new LLMService({\r\n  provider: 'lm-studio',\r\n  endpoint: 'http://127.0.0.1:1234/v1',\r\n  model: 'gemma-3n-e4b-it-text',\r\n  temperature: 0.1,\r\n  maxTokens: 500,\r\n  useMaxTokens: true,\r\n  timeout: 120000\r\n});"],"names":["DB_NAME","STORES","STORAGE_KEYS","DataService","resolve","reject","request","event","db","examStore","questionStore","answerStore","storeName","operation","store","exam","question","id","questions","exams","examsWithQuestions","answers","answer","examId","studentId","gradingResult","result","answerId","config","configStr","settings","settingsStr","storeNames","key","dataService","LLMService","error","response","model","subQuestion","systemPrompt","questionContext","answerToGrade","prompt","userPrompt","url","headers","requestBody","generationConfig","data","content","jsonMatch","text","scorePatterns","pointsPatterns","reasonPatterns","scoreMatch","pattern","pointsMatch","reasonMatch","maxScore","pointPercentage","_questions","_answers","_onProgress","iterations","results","i","points","r","average","sum","p","variance","isConsistent","llmService"],"mappings":"AAGA,MAAMA,EAAU,cAIhB,MAAMC,EAAS,CACb,MAAO,QACP,UAAW,YACX,QAAS,UACT,gBAAiB,gBACnB,EAGMC,EAAe,CACnB,WAAY,wBACZ,YAAa,wBACf,EAEA,MAAMC,CAAY,CACR,GAAyB,KAGjC,MAAM,QAAwB,CAC5B,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,MAAMC,EAAU,UAAU,KAAKN,EAAS,CAAU,EAElDM,EAAQ,QAAU,IAAM,CACtBD,EAAO,IAAI,MAAM,qBAAqB,CAAC,CACzC,EAEAC,EAAQ,UAAY,IAAM,CACxB,KAAK,GAAKA,EAAQ,OAClBF,EAAA,CACF,EAEAE,EAAQ,gBAAmBC,GAAU,CACnC,MAAMC,EAAMD,EAAM,OAA4B,OAG9C,GAAI,CAACC,EAAG,iBAAiB,SAASP,EAAO,KAAK,EAAG,CAC/C,MAAMQ,EAAYD,EAAG,kBAAkBP,EAAO,MAAO,CAAE,QAAS,KAAM,EACtEQ,EAAU,YAAY,OAAQ,OAAQ,CAAE,OAAQ,GAAO,EACvDA,EAAU,YAAY,YAAa,YAAa,CAAE,OAAQ,GAAO,CACnE,CAGA,GAAI,CAACD,EAAG,iBAAiB,SAASP,EAAO,SAAS,EAAG,CACnD,MAAMS,EAAgBF,EAAG,kBAAkBP,EAAO,UAAW,CAAE,QAAS,KAAM,EAC9ES,EAAc,YAAY,SAAU,SAAU,CAAE,OAAQ,GAAO,EAC/DA,EAAc,YAAY,SAAU,SAAU,CAAE,OAAQ,GAAO,CACjE,CAGA,GAAI,CAACF,EAAG,iBAAiB,SAASP,EAAO,OAAO,EAAG,CACjD,MAAMU,EAAcH,EAAG,kBAAkBP,EAAO,QAAS,CAAE,QAAS,KAAM,EAC1EU,EAAY,YAAY,SAAU,SAAU,CAAE,OAAQ,GAAO,EAC7DA,EAAY,YAAY,YAAa,YAAa,CAAE,OAAQ,GAAO,EACnEA,EAAY,YAAY,aAAc,aAAc,CAAE,OAAQ,GAAO,CACvE,CAGKH,EAAG,iBAAiB,SAASP,EAAO,eAAe,GAClCO,EAAG,kBAAkBP,EAAO,gBAAiB,CAAE,QAAS,KAAM,EACtE,YAAY,WAAY,WAAY,CAAE,OAAQ,GAAM,CAEpE,CACF,CAAC,CACH,CAGA,MAAc,mBACZW,EACAC,EACY,CACZ,GAAI,CAAC,KAAK,GACR,MAAM,IAAI,MAAM,mBAAmB,EAGrC,OAAO,IAAI,QAAQ,CAACT,EAASC,IAAW,CAEtC,MAAMS,EADc,KAAK,GAAI,YAAY,CAACF,CAAS,EAAG,WAAW,EACvC,YAAYA,CAAS,EACzCN,EAAUO,EAAUC,CAAK,EAE/BR,EAAQ,UAAY,IAAMF,EAAQE,EAAQ,MAAM,EAChDA,EAAQ,QAAU,IAAMD,EAAO,IAAI,MAAM,oBAAoBC,EAAQ,KAAK,EAAE,CAAC,CAC/E,CAAC,CACH,CAEA,MAAc,uBACZM,EACAC,EACY,CACZ,GAAI,CAAC,KAAK,GACR,MAAM,IAAI,MAAM,mBAAmB,EAGrC,OAAO,IAAI,QAAQ,CAACT,EAASC,IAAW,CAEtC,MAAMS,EADc,KAAK,GAAI,YAAY,CAACF,CAAS,EAAG,UAAU,EACtC,YAAYA,CAAS,EACzCN,EAAUO,EAAUC,CAAK,EAE/BR,EAAQ,UAAY,IAAMF,EAAQE,EAAQ,MAAM,EAChDA,EAAQ,QAAU,IAAMD,EAAO,IAAI,MAAM,sBAAsBC,EAAQ,KAAK,EAAE,CAAC,CACjF,CAAC,CACH,CAGA,MAAM,SAASS,EAA2B,CACxC,MAAM,KAAK,mBAAmBd,EAAO,SAAgBa,EAAM,IAAIC,CAAI,CAAC,EAGpE,UAAWC,KAAYD,EAAK,UAC1B,MAAM,KAAK,aAAaC,CAAQ,CAEpC,CAEA,MAAM,QAAQC,EAAkC,CAC9C,MAAMF,EAAO,MAAM,KAAK,uBAAuBd,EAAO,MAAOa,GAASA,EAAM,IAAIG,CAAE,CAAC,EACnF,GAAI,CAACF,EAAM,OAAO,KAGlB,MAAMG,EAAY,MAAM,KAAK,qBAAqBD,CAAE,EACpD,MAAO,CAAE,GAAGF,EAAM,UAAAG,CAAA,CACpB,CAEA,MAAM,aAA+B,CACnC,MAAMC,EAAQ,MAAM,KAAK,uBAAuBlB,EAAO,MAAOa,GAASA,EAAM,QAAQ,EAG/EM,EAA6B,CAAA,EACnC,UAAWL,KAAQI,EAAO,CACxB,MAAMD,EAAY,MAAM,KAAK,qBAAqBH,EAAK,EAAE,EACzDK,EAAmB,KAAK,CAAE,GAAGL,EAAM,UAAAG,EAAW,CAChD,CAEA,OAAOE,CACT,CAEA,MAAM,WAAWH,EAA2B,CAC1C,MAAM,KAAK,mBAAmBhB,EAAO,SAAgBa,EAAM,OAAOG,CAAE,CAAC,EAGrE,MAAMC,EAAY,MAAM,KAAK,qBAAqBD,CAAE,EACpD,UAAWD,KAAYE,EACrB,MAAM,KAAK,eAAeF,EAAS,EAAE,EAGvC,MAAMK,EAAU,MAAM,KAAK,mBAAmBJ,CAAE,EAChD,UAAWK,KAAUD,EACnB,MAAM,KAAK,aAAaC,EAAO,EAAE,CAErC,CAGA,MAAM,aAAaN,EAAmC,CACpD,MAAM,KAAK,mBAAmBf,EAAO,aAAoBa,EAAM,IAAIE,CAAQ,CAAC,CAC9E,CAEA,MAAM,YAAYC,EAAsC,CACtD,OAAO,MAAM,KAAK,uBAAuBhB,EAAO,UAAWa,GAASA,EAAM,IAAIG,CAAE,CAAC,CACnF,CAEA,MAAM,qBAAqBM,EAAqC,CAC9D,OAAO,MAAM,KAAK,uBAAuBtB,EAAO,UAAWa,GAC3CA,EAAM,MAAM,QAAQ,EACrB,OAAOS,CAAM,CAC3B,CACH,CAEA,MAAM,eAAeN,EAA2B,CAC9C,MAAM,KAAK,mBAAmBhB,EAAO,aAAoBa,EAAM,OAAOG,CAAE,CAAC,CAC3E,CAGA,MAAM,WAAWK,EAA+B,CAC9C,MAAM,KAAK,mBAAmBrB,EAAO,WAAkBa,EAAM,IAAIQ,CAAM,CAAC,CAC1E,CAEA,MAAM,UAAUL,EAAoC,CAClD,OAAO,MAAM,KAAK,uBAAuBhB,EAAO,QAASa,GAASA,EAAM,IAAIG,CAAE,CAAC,CACjF,CAEA,MAAM,mBAAmBM,EAAmC,CAC1D,OAAO,MAAM,KAAK,uBAAuBtB,EAAO,QAASa,GACzCA,EAAM,MAAM,QAAQ,EACrB,OAAOS,CAAM,CAC3B,CACH,CAEA,MAAM,sBAAsBC,EAAsC,CAChE,OAAO,MAAM,KAAK,uBAAuBvB,EAAO,QAASa,GACzCA,EAAM,MAAM,WAAW,EACxB,OAAOU,CAAS,CAC9B,CACH,CAEA,MAAM,aAAaP,EAA2B,CAC5C,MAAM,KAAK,mBAAmBhB,EAAO,WAAkBa,EAAM,OAAOG,CAAE,CAAC,EAGvE,MAAMQ,EAAgB,MAAM,KAAK,2BAA2BR,CAAE,EAC1DQ,GACF,MAAM,KAAK,oBAAoBA,EAAc,EAAE,CAEnD,CAGA,MAAM,kBAAkBC,EAAsC,CAC5D,MAAM,KAAK,mBAAmBzB,EAAO,mBAA0Ba,EAAM,IAAIY,CAAM,CAAC,CAClF,CAEA,MAAM,iBAAiBT,EAA2C,CAChE,OAAO,MAAM,KAAK,uBAAuBhB,EAAO,gBAAiBa,GAASA,EAAM,IAAIG,CAAE,CAAC,CACzF,CAEA,MAAM,2BAA2BU,EAAiD,CAChF,OAAO,MAAM,KAAK,uBAAuB1B,EAAO,gBAAiBa,GACjDA,EAAM,MAAM,UAAU,EACvB,IAAIa,CAAQ,CAC1B,CACH,CAEA,MAAM,sBAAiD,CACrD,OAAO,MAAM,KAAK,uBAAuB1B,EAAO,gBAAiBa,GAASA,EAAM,QAAQ,CAC1F,CAEA,MAAM,oBAAoBG,EAA2B,CACnD,MAAM,KAAK,mBAAmBhB,EAAO,mBAA0Ba,EAAM,OAAOG,CAAE,CAAC,CACjF,CAGA,cAAcW,EAAyB,CACrC,aAAa,QAAQ1B,EAAa,WAAY,KAAK,UAAU0B,CAAM,CAAC,CACtE,CAEA,cAAiC,CAC/B,MAAMC,EAAY,aAAa,QAAQ3B,EAAa,UAAU,EAC9D,OAAO2B,EAAY,KAAK,MAAMA,CAAS,EAAI,IAC7C,CAEA,eAAeC,EAAqC,CAClD,aAAa,QAAQ5B,EAAa,YAAa,KAAK,UAAU4B,CAAQ,CAAC,CACzE,CAEA,eAA4C,CAC1C,MAAMC,EAAc,aAAa,QAAQ7B,EAAa,WAAW,EACjE,OAAO6B,EAAc,KAAK,MAAMA,CAAW,EAAI,IACjD,CAGA,MAAM,cAA8B,CAClC,GAAI,CAAC,KAAK,GAAI,OAEd,MAAMC,EAAa,CAAC/B,EAAO,MAAOA,EAAO,UAAWA,EAAO,QAASA,EAAO,eAAe,EAE1F,UAAWW,KAAaoB,EACtB,MAAM,KAAK,mBAAmBpB,EAAWE,GAASA,EAAM,OAAO,CAEnE,CAEA,mBAA0B,CACxB,OAAO,OAAOZ,CAAY,EAAE,QAAQ+B,GAAO,CACzC,aAAa,WAAWA,CAAG,CAC7B,CAAC,CACH,CAGA,aAAuB,CACrB,OAAO,KAAK,KAAO,IACrB,CAGA,OAAc,CACR,KAAK,KACP,KAAK,GAAG,MAAA,EACR,KAAK,GAAK,KAEd,CACF,CAGO,MAAMC,EAAc,IAAI/B,EC3QxB,MAAMgC,CAAW,CACd,OAER,YAAYP,EAAmB,CAC7B,KAAK,OAASA,CAChB,CAGA,aAAaA,EAAyB,CACpC,KAAK,OAASA,CAChB,CAGA,MAAM,gBAAmC,CACvC,GAAI,CASF,OARiB,MAAM,MAAM,GAAG,KAAK,OAAO,QAAQ,UAAW,CAC7D,OAAQ,MACR,QAAS,CACP,eAAgB,kBAAA,EAElB,OAAQ,YAAY,QAAQ,KAAK,OAAO,OAAO,CAAA,CAChD,GAEe,EAClB,OAASQ,EAAO,CACd,eAAQ,MAAM,qBAAsBA,CAAK,EAClC,EACT,CACF,CAGA,MAAM,oBAAwC,CAC5C,GAAI,CACF,MAAMC,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,QAAQ,UAAW,CAC7D,OAAQ,MACR,QAAS,CACP,eAAgB,kBAAA,EAElB,OAAQ,YAAY,QAAQ,KAAK,OAAO,OAAO,CAAA,CAChD,EAED,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQA,EAAS,MAAM,KAAKA,EAAS,UAAU,EAAE,EAInE,OADa,MAAMA,EAAS,KAAA,GAChB,MAAM,IAAKC,GAAeA,EAAM,EAAE,GAAK,CAAA,CACrD,OAASF,EAAO,CACd,cAAQ,MAAM,cAAeA,CAAK,EAC5B,IAAI,MAAM,iBAAiB,CACnC,CACF,CAGQ,sBAAsBG,EAA0BjB,EAA+B,CACrF,MAAMkB,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAefC,EAAkB;AAAA,EAC1BF,EAAY,OAAO;AAAA;AAAA;AAAA,EAGnBA,EAAY,SAAS;AAAA;AAAA;AAAA,EAGrBA,EAAY,YAAY;AAAA;AAAA,aAEbA,EAAY,QAAQ,UAEvBG,EAAgB;AAAA,cACZpB,EAAO,SAAS;AAAA,kBACZA,EAAO,OAAO,GAS5B,MAAO,CACL,aAAAkB,EACA,gBAAAC,EACA,cAAAC,EACA,gBAXsB;AAAA;AAAA;AAAA;AAAA;AAAA,yCAWtB,CAEJ,CAGA,MAAM,YAAYH,EAA0BjB,EAA6C,CACvF,MAAMqB,EAAS,KAAK,sBAAsBJ,EAAajB,CAAM,EAEvDsB,EAAa,GAAGD,EAAO,eAAe;AAAA;AAAA,EAE9CA,EAAO,aAAa;AAAA;AAAA,EAEpBA,EAAO,eAAe;AAAA;AAAA,sGAIpB,GAAI,CACF,IAAIE,EAAM,GACNC,EAAkC,CACpC,eAAgB,kBAAA,EAEdC,EAAmB,CACrB,MAAO,KAAK,OAAO,MACnB,SAAU,CACR,CACE,KAAM,SACN,QAASJ,EAAO,YAAA,EAElB,CACE,KAAM,OACN,QAASC,CAAA,CACX,EAEF,YAAa,KAAK,OAAO,WAAA,EAS3B,OALI,KAAK,OAAO,eACdG,EAAY,WAAa,KAAK,OAAO,WAI/B,KAAK,OAAO,SAAA,CAClB,IAAK,YACHF,EAAM,GAAG,KAAK,OAAO,QAAQ,oBAC7BC,EAAQ,cAAmB,mBAC3B,MAEF,IAAK,SACHD,EAAM,GAAG,KAAK,OAAO,YAAc,KAAK,OAAO,QAAQ,uBACvD,MAEF,IAAK,eACC,KAAK,OAAO,YAAY,SAAS,IAAI,EAEvCA,EAAM,GAAG,KAAK,OAAO,QAAQ,8BAG7BA,EAAM,GAAG,KAAK,OAAO,QAAQ,uBAAuB,KAAK,OAAO,YAAY,iCAAiC,KAAK,OAAO,UAAU,GAEjI,KAAK,OAAO,SACdC,EAAQ,SAAS,EAAI,KAAK,OAAO,QAEnC,MAEF,IAAK,SAEHD,EAAM,GAAG,KAAK,OAAO,QAAQ,WAAW,KAAK,OAAO,KAAK,mBACrD,KAAK,OAAO,eACdC,EAAQ,gBAAgB,EAAI,KAAK,OAAO,cAE1C,MAAME,EAAwB,CAC5B,YAAa,KAAK,OAAO,WAAA,EAIvB,KAAK,OAAO,eACdA,EAAiB,gBAAkB,KAAK,OAAO,WAGjDD,EAAc,CACZ,SAAU,CACR,CACE,MAAO,CACL,CACE,KAAM,GAAGJ,EAAO,YAAY;AAAA;AAAA,EAAOC,CAAU,EAAA,CAC/C,CACF,CACF,EAEF,iBAAAI,CAAA,EAEF,MAEF,QACE,MAAM,IAAI,MAAM,yBAAyB,KAAK,OAAO,QAAQ,EAAE,CAAA,CAGnE,QAAQ,IAAI,qBAAsBH,CAAG,EACrC,QAAQ,IAAI,gBAAiB,KAAK,UAAUE,EAAa,KAAM,CAAC,CAAC,EAEjE,MAAMV,EAAW,MAAM,MAAMQ,EAAK,CAChC,OAAQ,OACR,QAAAC,EACA,KAAM,KAAK,UAAUC,CAAW,EAChC,OAAQ,YAAY,QAAQ,KAAK,OAAO,OAAO,CAAA,CAChD,EAED,GAAI,CAACV,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQA,EAAS,MAAM,KAAKA,EAAS,UAAU,EAAE,EAGnE,MAAMY,EAAO,MAAMZ,EAAS,KAAA,EAC5B,IAAIa,EAAU,GAGd,OAAQ,KAAK,OAAO,SAAA,CAClB,IAAK,YACL,IAAK,SACL,IAAK,eACHA,EAAUD,EAAK,UAAU,CAAC,GAAG,SAAS,QACtC,MACF,IAAK,SACHC,EAAUD,EAAK,aAAa,CAAC,GAAG,SAAS,QAAQ,CAAC,GAAG,KACrD,KAAA,CAGJ,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,cAAc,EAGhC,QAAQ,IAAI,gBAAiBA,CAAO,EAGpC,IAAIzB,EACJ,GAAI,CAEF,MAAM0B,EAAYD,EAAQ,MAAM,4BAA4B,EACxDC,EACF1B,EAAgB,KAAK,MAAM0B,EAAU,CAAC,CAAC,EAEvC1B,EAAgB,KAAK,MAAMyB,CAAO,CAEtC,MAAqB,CAEnBzB,EAAgB,KAAK,uBAAuByB,CAAO,CACrD,CAGA,YAAK,wBAAwBzB,EAAec,EAAY,QAAQ,EAEzDd,CACT,OAASW,EAAO,CAGd,MAFA,QAAQ,MAAM,YAAaA,CAAK,EAE5BA,aAAiB,MACfA,EAAM,OAAS,aACX,IAAI,MAAM,eAAe,EAE3B,IAAI,MAAM,oBAAoBA,EAAM,OAAO,EAAE,EAG/C,IAAI,MAAM,oBAAoB,CACtC,CACF,CAGQ,uBAAuBgB,EAAkC,CAC/D,QAAQ,IAAI,wBAAyBA,CAAI,EAGzC,MAAMC,EAAgB,CACpB,wCACA,sBACA,UACA,qBAAA,EAGIC,EAAiB,CACrB,gCACA,sBACA,kBACA,gBAAA,EAGIC,EAAiB,CACrB,0CACA,6BACA,8BACA,iCAAA,EAGF,IAAIC,EAAa,KACjB,UAAWC,KAAWJ,EAEpB,GADAG,EAAaJ,EAAK,MAAMK,CAAO,EAC3BD,EAAY,MAGlB,IAAIE,EAAc,KAClB,UAAWD,KAAWH,EAEpB,GADAI,EAAcN,EAAK,MAAMK,CAAO,EAC5BC,EAAa,MAGnB,IAAIC,EAAc,KAClB,UAAWF,KAAWF,EAEpB,GADAI,EAAcP,EAAK,MAAMK,CAAO,EAC5BE,EAAa,MAGnB,GAAI,CAACH,EACH,cAAQ,MAAM,0BAA2BJ,CAAI,EACvC,IAAI,MAAM,qBAAqB,EAGvC,MAAO,CACL,MAAOI,EAAW,CAAC,EACnB,OAAQE,EAAc,SAASA,EAAY,CAAC,EAAG,EAAE,EAAI,EACrD,OAAQC,EAAcA,EAAY,CAAC,EAAE,OAAS,iBAAA,CAElD,CAGQ,wBAAwBtB,EAA8BuB,EAAwB,CACpF,GAAI,CAAC,CAAC,IAAK,IAAK,GAAG,EAAE,SAASvB,EAAS,KAAK,EAC1C,MAAM,IAAI,MAAM,WAAWA,EAAS,KAAK,EAAE,EAG7C,GAAI,OAAOA,EAAS,QAAW,UAAYA,EAAS,OAAS,GAAKA,EAAS,OAASuB,EAClF,MAAM,IAAI,MAAM,UAAUvB,EAAS,MAAM,SAASuB,CAAQ,GAAG,EAG/D,GAAI,CAACvB,EAAS,QAAU,OAAOA,EAAS,QAAW,UAAYA,EAAS,OAAO,SAAW,EACxF,MAAM,IAAI,MAAM,WAAW,EAI7B,MAAMwB,EAAmBxB,EAAS,OAASuB,EAAY,IAEnDvB,EAAS,QAAU,KAAOwB,EAAkB,GAC9C,QAAQ,KAAK,gBAAgBxB,EAAS,MAAM,IAAIuB,CAAQ,KAAKC,EAAgB,QAAQ,CAAC,CAAC,IAAI,EAClFxB,EAAS,QAAU,MAAQwB,EAAkB,IAAMA,GAAmB,IAC/E,QAAQ,KAAK,iBAAiBxB,EAAS,MAAM,IAAIuB,CAAQ,KAAKC,EAAgB,QAAQ,CAAC,CAAC,IAAI,EACnFxB,EAAS,QAAU,KAAOwB,GAAmB,IACtD,QAAQ,KAAK,gBAAgBxB,EAAS,MAAM,IAAIuB,CAAQ,KAAKC,EAAgB,QAAQ,CAAC,CAAC,IAAI,CAE/F,CAGA,MAAM,WACJC,EACAC,EACAC,EAC+B,CAE/B,MAAM,IAAI,MAAM,iBAAiB,CACnC,CAGA,MAAM,iBAAiBzB,EAA0BjB,EAAgB2C,EAAqB,EAInF,CACD,MAAMC,EAAgC,CAAA,EAEtC,QAASC,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CACnC,MAAMzC,EAAS,MAAM,KAAK,YAAYa,EAAajB,CAAM,EACzD4C,EAAQ,KAAKxC,CAAM,EAGfyC,EAAIF,EAAa,GACnB,MAAM,IAAI,QAAQ7D,GAAW,WAAWA,EAAS,GAAG,CAAC,CAEzD,CAGA,MAAMgE,EAASF,EAAQ,IAAIG,GAAKA,EAAE,MAAM,EAClCC,EAAUF,EAAO,OAAO,CAACG,EAAKC,IAAMD,EAAMC,EAAG,CAAC,EAAIJ,EAAO,OACzDK,EAAWL,EAAO,OAAO,CAACG,EAAKC,IAAMD,EAAM,KAAK,IAAIC,EAAIF,EAAS,CAAC,EAAG,CAAC,EAAIF,EAAO,OAIjFM,EADoB,KAAK,KAAKD,CAAQ,GACDlC,EAAY,SAAW,GAElE,MAAO,CACL,QAAA2B,EACA,aAAAQ,EACA,SAAAD,CAAA,CAEJ,CACF,CAEO,MAAME,EAAa,IAAIxC,EAAW,CACvC,SAAU,YACV,SAAU,2BACV,MAAO,uBACP,YAAa,GACb,UAAW,IACX,aAAc,GACd,QAAS,IACX,CAAC"}